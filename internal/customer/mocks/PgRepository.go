// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/alpakih/point-of-sales/pkg/database"

	domain "github.com/alpakih/point-of-sales/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// PgRepository is an autogenerated mock type for the PgRepository type
type PgRepository struct {
	mock.Mock
}

// CheckDuplicate provides a mock function with given fields: ctx, args
func (_m *PgRepository) CheckDuplicate(ctx context.Context, args ...interface{}) (int64, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) int64); ok {
		r0 = rf(ctx, args...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...interface{}) error); ok {
		r1 = rf(ctx, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, entity
func (_m *PgRepository) Create(ctx context.Context, entity *domain.Customer) error {
	ret := _m.Called(ctx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Customer) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *PgRepository) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindCustomers provides a mock function with given fields: ctx, page, size, search, order
func (_m *PgRepository) FindCustomers(ctx context.Context, page int, size int, search string, order string) (*database.Paginator, error) {
	ret := _m.Called(ctx, page, size, search, order)

	var r0 *database.Paginator
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string, string) *database.Paginator); ok {
		r0 = rf(ctx, page, size, search, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Paginator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int, string, string) error); ok {
		r1 = rf(ctx, page, size, search, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneCustomerByID provides a mock function with given fields: ctx, id
func (_m *PgRepository) FindOneCustomerByID(ctx context.Context, id int) (domain.Customer, error) {
	ret := _m.Called(ctx, id)

	var r0 domain.Customer
	if rf, ok := ret.Get(0).(func(context.Context, int) domain.Customer); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Customer)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, entity
func (_m *PgRepository) Update(ctx context.Context, entity domain.Customer) error {
	ret := _m.Called(ctx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Customer) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
