// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	customer "github.com/alpakih/point-of-sales/internal/customer"
	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// DeleteCustomer provides a mock function with given fields: ctx, id
func (_m *UseCase) DeleteCustomer(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCustomerByID provides a mock function with given fields: ctx, id
func (_m *UseCase) GetCustomerByID(ctx context.Context, id int) (*customer.Response, error) {
	ret := _m.Called(ctx, id)

	var r0 *customer.Response
	if rf, ok := ret.Get(0).(func(context.Context, int) *customer.Response); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customer.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomers provides a mock function with given fields: ctx, page, size, search, order
func (_m *UseCase) GetCustomers(ctx context.Context, page int, size int, search string, order string) (*customer.PaginationResponse, error) {
	ret := _m.Called(ctx, page, size, search, order)

	var r0 *customer.PaginationResponse
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string, string) *customer.PaginationResponse); ok {
		r0 = rf(ctx, page, size, search, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customer.PaginationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int, string, string) error); ok {
		r1 = rf(ctx, page, size, search, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreCustomer provides a mock function with given fields: ctx, request
func (_m *UseCase) StoreCustomer(ctx context.Context, request customer.StoreRequest) (*customer.Response, error) {
	ret := _m.Called(ctx, request)

	var r0 *customer.Response
	if rf, ok := ret.Get(0).(func(context.Context, customer.StoreRequest) *customer.Response); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customer.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, customer.StoreRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCustomer provides a mock function with given fields: ctx, entity, id
func (_m *UseCase) UpdateCustomer(ctx context.Context, entity customer.UpdateRequest, id int) error {
	ret := _m.Called(ctx, entity, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, customer.UpdateRequest, int) error); ok {
		r0 = rf(ctx, entity, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
